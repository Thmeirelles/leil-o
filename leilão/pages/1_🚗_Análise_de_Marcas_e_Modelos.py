import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter
import re
st.set_page_config(page_title="An√°lise de Leil√£o - Marcas e Modelos", layout="wide")
st.markdown("# üöó An√°lise de Marcas e Modelos - Leil√£o de Ve√≠culos")
st.sidebar.markdown("# üöó An√°lise de Marcas e Modelos - Leil√£o de Ve√≠culos")
# Configura√ß√£o da p√°gina


# T√≠tulo do aplicativo
st.markdown("---")

# Fun√ß√£o para carregar e limpar os dados
@st.cache_data
def load_data():
    # Lendo o arquivo CSV
    df = pd.read_csv('leil√£o/dados/tabela.csv')
    
    # Limpando e convertendo valores monet√°rios
    currency_columns = ['AVALIA√á√ÉO', 'Lance Inicial', 'Valor da Arremata√ß√£o']
    
    for col in currency_columns:
        df[col] = df[col].str.replace('R$', '').str.replace('.', '').str.replace(',', '.').str.strip()
        df[col] = pd.to_numeric(df[col], errors='coerce')
    
    return df

# Carregando os dados
try:
    df = load_data()
    
    # Sidebar com filtros
    st.sidebar.header("üîß Filtros")
    
    # Filtro por tipo de ve√≠culo
    tipos = st.sidebar.multiselect(
        "Tipo de Ve√≠culo:",
        options=df['TIPO'].unique(),
        default=df['TIPO'].unique()
    )
    
    # Filtro por munic√≠pio
    municipios = st.sidebar.multiselect(
        "Munic√≠pio:",
        options=df['MUNIC√çPIO'].unique(),
        default=df['MUNIC√çPIO'].unique()
    )
    
    # Aplicando filtros
    df_filtered = df[
        (df['TIPO'].isin(tipos)) & 
        (df['MUNIC√çPIO'].isin(municipios))
    ]
    
    # Layout em colunas para os gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üèÜ Top 10 Marcas com Mais Lotes")
        
        # Contagem de marcas
        marcas_count = df_filtered['MARCA'].value_counts().head(10)
        
        fig_marcas = px.bar(
            x=marcas_count.values,
            y=marcas_count.index,
            orientation='h',
            color=marcas_count.values,
            color_continuous_scale='blues',
            text=marcas_count.values
        )
        
        fig_marcas.update_layout(
            xaxis_title="Quantidade de Lotes",
            yaxis_title="Marca",
            showlegend=False,
            height=500
        )
        
        st.plotly_chart(fig_marcas, use_container_width=True)
        
        # Estat√≠sticas r√°pidas
        st.markdown("**üìä Estat√≠sticas das Marcas:**")
        total_marcas = df_filtered['MARCA'].nunique()
        st.write(f"- **Total de marcas diferentes:** {total_marcas}")
        st.write(f"- **Marca mais frequente:** {marcas_count.index[0]} ({marcas_count.values[0]} lotes)")
        st.write(f"- **Participa√ß√£o do top 5:** {marcas_count.head(5).sum() / len(df_filtered) * 100:.1f}% do total")
    
    with col2:
        st.subheader("üìà Modelos Mais Frequentes")
        
        # Contagem de modelos (usando NOME_POPULAR)
        modelos_count = df_filtered['NOME_POPULAR'].value_counts().head(10)
        
        fig_modelos = px.bar(
            x=modelos_count.values,
            y=modelos_count.index,
            orientation='h',
            color=modelos_count.values,
            color_continuous_scale='greens',
            text=modelos_count.values
        )
        
        fig_modelos.update_layout(
            xaxis_title="Quantidade de Lotes",
            yaxis_title="Modelo",
            showlegend=False,
            height=500
        )
        
        st.plotly_chart(fig_modelos, use_container_width=True)
        
        # Estat√≠sticas r√°pidas
        st.markdown("**üìà Estat√≠sticas dos Modelos:**")
        total_modelos = df_filtered['NOME_POPULAR'].nunique()
        st.write(f"- **Total de modelos diferentes:** {total_modelos}")
        st.write(f"- **Modelo mais frequente:** {modelos_count.index[0]} ({modelos_count.values[0]} lotes)")
    st.markdown("---")
    # Gr√°fico de Treemap - Hierarquia Marca > Modelo
    st.subheader("Distribui√ß√£o de Ve√≠culos por Marca e Modelo")
    
    # Preparando dados para o treemap
    treemap_data = df_filtered.groupby(['MARCA', 'NOME_POPULAR']).size().reset_index(name='QUANTIDADE')
    
    fig_treemap = px.treemap(
        treemap_data,
        path=['MARCA', 'NOME_POPULAR'],
        values='QUANTIDADE',
        color='QUANTIDADE',
        color_continuous_scale='viridis',
        title='üå≥ Hierarquia Marca ‚Üí Modelo'
    )
    
    fig_treemap.update_layout(height=600)
    
    st.plotly_chart(fig_treemap, use_container_width=True)
    st.markdown("---")
    # Tabela detalhada
    st.subheader("üìã Detalhamento por Marca e Modelo")
    with st.expander("üîç Clique para ver a tabela detalhada"):
        # Criando tabela resumo
        resumo_table = df_filtered.groupby(['MARCA', 'NOME_POPULAR', 'TIPO']).agg({
            'LOTE': 'count',
            'AVALIA√á√ÉO': 'mean',
            'Valor da Arremata√ß√£o': 'mean'
        }).round(2).reset_index()
        
        resumo_table.columns = ['Marca', 'Modelo', 'Tipo', 'Quantidade', 'Valor M√©dio Avalia√ß√£o', 'Valor M√©dio Arremata√ß√£o']
        
        # Ordenando por quantidade
        resumo_table = resumo_table.sort_values('Quantidade', ascending=False)
        
        st.dataframe(resumo_table, use_container_width=True)
    
    # M√©tricas gerais
    
    with st.expander("üìä M√©tricas Gerais",expanded=True):
        col_met1, col_met2, col_met3, col_met4 = st.columns(4)
        
        with col_met1:
            st.metric("Total de Lotes", len(df_filtered))
        
        with col_met2:
            st.metric("Marcas √önicas", df_filtered['MARCA'].nunique())
        
        with col_met3:
            st.metric("Modelos √önicos", df_filtered['NOME_POPULAR'].nunique())
        
        with col_met4:
            taxa_arrematacao = (df_filtered['Valor da Arremata√ß√£o'].notna().sum() / len(df_filtered)) * 100
            st.metric("Taxa de Arremata√ß√£o", f"{taxa_arrematacao:.1f}%")
        
    # Download dos dados processados
    st.subheader("üì• Download dos Dados Processados")
    
    csv = resumo_table.to_csv(index=False)
    st.download_button(
        label="Baixar tabela resumo (CSV)",
        data=csv,
        file_name="resumo_marcas_modelos.csv",
        mime="text/csv"
    )

except FileNotFoundError:
    st.error("‚ùå Arquivo 'tabela.csv' n√£o encontrado. Certifique-se de que o arquivo est√° no diret√≥rio correto.")
    
except Exception as e:
    st.error(f"‚ùå Ocorreu um erro ao processar os dados: {str(e)}")

# Informa√ß√µes sobre o aplicativo
# st.sidebar.markdown("---")
# st.sidebar.header("‚ÑπÔ∏è Sobre o App")
# st.sidebar.info(
# )