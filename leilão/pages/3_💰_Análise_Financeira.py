import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from scipy import stats


st.set_page_config(page_title="An√°lise Financeira - Leil√£o de Ve√≠culos", layout="wide")

st.title("üí∞ An√°lise Financeira - Leil√£o de Ve√≠culos")
st.markdown("---")

@st.cache_data
def load_data():
    df = pd.read_csv('leil√£o/dados/tabela.csv')
    currency_columns = ['AVALIA√á√ÉO', 'Lance Inicial', 'Valor da Arremata√ß√£o']
    
    for col in currency_columns:
        if df[col].dtype == 'object':
            df[col] = df[col].str.replace('R$', '').str.replace('.', '').str.replace(',', '.').str.strip()
        df[col] = pd.to_numeric(df[col], errors='coerce')

    df['Diferen√ßa Percentual'] = ((df['Valor da Arremata√ß√£o'] - df['AVALIA√á√ÉO']) / df['AVALIA√á√ÉO']) * 100

    df['Status Arremata√ß√£o'] = df['Valor da Arremata√ß√£o'].apply(lambda x: 'Arrematado' if pd.notna(x) else 'N√£o Arrematado')
    
    return df

try:
    df = load_data()
    
    st.sidebar.header("üîß Filtros Financeiros")
    
    tipos = st.sidebar.multiselect(
        "Tipo de Ve√≠culo:",
        options=df['TIPO'].unique(),
        default=df['TIPO'].unique()
    )
    
    marcas = st.sidebar.multiselect(
        "Marca:",
        options=df['MARCA'].unique(),
        default=df['MARCA'].unique()
    )
    
    status_arrematacao = st.sidebar.multiselect(
        "Status de Arremata√ß√£o:",
        options=df['Status Arremata√ß√£o'].unique(),
        default=df['Status Arremata√ß√£o'].unique()
    )
    
    min_avaliacao = float(df['AVALIA√á√ÉO'].min())
    max_avaliacao = float(df['AVALIA√á√ÉO'].max())
    
    faixa_avaliacao = st.sidebar.slider(
        "Faixa de Valor de Avalia√ß√£o (R$):",
        min_value=min_avaliacao,
        max_value=max_avaliacao,
        value=(min_avaliacao, max_avaliacao)
    )
    
    df_filtered = df[
        (df['TIPO'].isin(tipos)) & 
        (df['MARCA'].isin(marcas)) &
        (df['Status Arremata√ß√£o'].isin(status_arrematacao)) &
        (df['AVALIA√á√ÉO'] >= faixa_avaliacao[0]) &
        (df['AVALIA√á√ÉO'] <= faixa_avaliacao[1])
    ]
    
    st.subheader("üìä M√©tricas Financeiras Principais")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_avaliacao = df_filtered['AVALIA√á√ÉO'].sum()
        st.metric("Valor Total em Avalia√ß√£o", f"R$ {total_avaliacao:,.0f}")
    
    with col2:
        total_arrematado = df_filtered['Valor da Arremata√ß√£o'].sum()
        st.metric("Valor Total Arrematado", f"R$ {total_arrematado:,.0f}")
    
    with col3:
        taxa_arrematacao = (df_filtered['Valor da Arremata√ß√£o'].notna().sum() / len(df_filtered)) * 100
        st.metric("Taxa de Arremata√ß√£o", f"{taxa_arrematacao:.1f}%")
    
    with col4:
        df_arrematados = df_filtered[df_filtered['Status Arremata√ß√£o'] == 'Arrematado']
        if len(df_arrematados) > 0:
            desconto_medio = ((df_arrematados['AVALIA√á√ÉO'] - df_arrematados['Valor da Arremata√ß√£o']).mean() / df_arrematados['AVALIA√á√ÉO'].mean()) * 100
            st.metric("Desconto M√©dio", f"{desconto_medio:.1f}%")
        else:
            st.metric("Desconto M√©dio", "N/A")
    
    st.subheader("üìà Gr√°fico de Dispers√£o: Avalia√ß√£o vs Arremata√ß√£o")
    
    df_dispersao = df_filtered[df_filtered['Status Arremata√ß√£o'] == 'Arrematado']
    
    if not df_dispersao.empty:
       
        correlacao = df_dispersao['AVALIA√á√ÉO'].corr(df_dispersao['Valor da Arremata√ß√£o'])
        
        x = df_dispersao['AVALIA√á√ÉO']
        y = df_dispersao['Valor da Arremata√ß√£o']
        
        mask = ~np.isnan(x) & ~np.isnan(y)
        x_clean = x[mask]
        y_clean = y[mask]
        
        if len(x_clean) > 1:
            slope, intercept, r_value, p_value, std_err = stats.linregress(x_clean, y_clean)
            line = slope * x_clean + intercept
            
            equation = f"y = {slope:.4f}x + {intercept:.2f}"
            r_squared = r_value**2
            
            fig_dispersao = px.scatter(
                df_dispersao,
                x='AVALIA√á√ÉO',
                y='Valor da Arremata√ß√£o',
                color='TIPO',
                size='AVALIA√á√ÉO',
                hover_data=['MARCA', 'NOME_POPULAR', 'MUNIC√çPIO'],
                title=f'Rela√ß√£o entre Valor de Avalia√ß√£o e Valor de Arremata√ß√£o<br><sup>Correla√ß√£o: {correlacao:.3f} | R¬≤: {r_squared:.3f} | Equa√ß√£o: {equation}</sup>',
                labels={
                    'AVALIA√á√ÉO': 'Valor de Avalia√ß√£o (R$)',
                    'Valor da Arremata√ß√£o': 'Valor de Arremata√ß√£o (R$)',
                    'TIPO': 'Tipo de Ve√≠culo'
                }
            )
            
            fig_dispersao.add_trace(
                go.Scatter(
                    x=x_clean,
                    y=line,
                    mode='lines',
                    line=dict(color='red', width=3, dash='dash'),
                    name=f'Linha de Tend√™ncia (R¬≤ = {r_squared:.3f})'
                )
            )
            
            max_val = max(df_dispersao['AVALIA√á√ÉO'].max(), df_dispersao['Valor da Arremata√ß√£o'].max())
            fig_dispersao.add_trace(
                go.Scatter(
                    x=[0, max_val],
                    y=[0, max_val],
                    mode='lines',
                    line=dict(dash='dot', color='green', width=2),
                    name='Linha de Igualdade (Avalia√ß√£o = Arremata√ß√£o)'
                )
            )
            
        else:
            # Caso n√£o haja dados suficientes para regress√£o
            fig_dispersao = px.scatter(
                df_dispersao,
                x='AVALIA√á√ÉO',
                y='Valor da Arremata√ß√£o',
                color='TIPO',
                size='AVALIA√á√ÉO',
                hover_data=['MARCA', 'NOME_POPULAR', 'MUNIC√çPIO'],
                title=f'Rela√ß√£o entre Valor de Avalia√ß√£o e Valor de Arremata√ß√£o<br><sup>Correla√ß√£o: {correlacao:.3f}</sup>',
                labels={
                    'AVALIA√á√ÉO': 'Valor de Avalia√ß√£o (R$)',
                    'Valor da Arremata√ß√£o': 'Valor de Arremata√ß√£o (R$)',
                    'TIPO': 'Tipo de Ve√≠culo'
                }
            )
        
        fig_dispersao.update_layout(height=600)
        st.plotly_chart(fig_dispersao, use_container_width=True)
        
        st.markdown("**üìã An√°lise da Correla√ß√£o:**")
        
        if abs(correlacao) >= 0.9:
            forca = "muito forte"
        elif abs(correlacao) >= 0.7:
            forca = "forte"
        elif abs(correlacao) >= 0.5:
            forca = "moderada"
        elif abs(correlacao) >= 0.3:
            forca = "fraca"
        else:
            forca = "muito fraca"
        
        direcao = "positiva" if correlacao > 0 else "negativa"
        
        st.write(f"- **Coeficiente de correla√ß√£o (r):** {correlacao:.3f}")
        if len(x_clean) > 1:
            st.write(f"- **Coeficiente de determina√ß√£o (R¬≤):** {r_squared:.3f}")
        st.write(f"- **For√ßa da rela√ß√£o:** {forca}")
        st.write(f"- **Dire√ß√£o da rela√ß√£o:** {direcao}")
        
        st.markdown("**üí° Interpreta√ß√£o Pr√°tica:**")
        if correlacao > 0.7:
            st.write("‚úÖ H√° uma forte rela√ß√£o positiva: ve√≠culos com maior valor de avalia√ß√£o tendem a ser arrematados por valores mais altos.")
        elif correlacao > 0.3:
            st.write("‚ö†Ô∏è H√° uma rela√ß√£o moderada: o valor de avalia√ß√£o influencia, mas n√£o determina completamente o valor de arremata√ß√£o.")
        else:
            st.write("üîç A rela√ß√£o √© fraca: outros fatores al√©m do valor de avalia√ß√£o podem estar influenciando mais os valores de arremata√ß√£o.")

        st.markdown("**üìä Estat√≠sticas Adicionais:**")
        acima_linha = len(df_dispersao[df_dispersao['Valor da Arremata√ß√£o'] > df_dispersao['AVALIA√á√ÉO']])
        percentual_acima = (acima_linha / len(df_dispersao)) * 100
        
        st.write(f"- **Lotes arrematados acima do valor de avalia√ß√£o:** {acima_linha} ({percentual_acima:.1f}%)")
        st.write(f"- **Lotes arrematados abaixo do valor de avalia√ß√£o:** {len(df_dispersao) - acima_linha} ({(100 - percentual_acima):.1f}%)")
        
        if len(df_dispersao) > 0:
            desconto_medio_real = ((df_dispersao['AVALIA√á√ÉO'] - df_dispersao['Valor da Arremata√ß√£o']).mean() / df_dispersao['AVALIA√á√ÉO'].mean()) * 100
            st.write(f"- **Desconto m√©dio nos lotes arrematados:** {desconto_medio_real:.1f}%")
        
    else:
        st.warning("‚ö†Ô∏è N√£o h√° dados de lotes arrematados para exibir o gr√°fico de dispers√£o.")
    

    col_left, col_right = st.columns(2)
    
    with col_left:
        st.subheader("üì¶ Distribui√ß√£o de Valores por Tipo de Ve√≠culo")
        

        df_boxplot = df_filtered[df_filtered['Status Arremata√ß√£o'] == 'Arrematado']
        
        if not df_boxplot.empty:
            fig_boxplot = px.box(
                df_boxplot,
                x='TIPO',
                y='Valor da Arremata√ß√£o',
                color='TIPO',
                points="all",
                hover_data=['MARCA', 'NOME_POPULAR'],
                title='Distribui√ß√£o dos Valores de Arremata√ß√£o por Tipo de Ve√≠culo',
                labels={
                    'TIPO': 'Tipo de Ve√≠culo',
                    'Valor da Arremata√ß√£o': 'Valor de Arremata√ß√£o (R$)'
                }
            )
            
            fig_boxplot.update_layout(height=500)
            st.plotly_chart(fig_boxplot, use_container_width=True)
            

            st.markdown("**üìä Estat√≠sticas por Tipo:**")
            stats_by_type = df_boxplot.groupby('TIPO')['Valor da Arremata√ß√£o'].agg(['mean', 'median', 'min', 'max', 'count']).round(2)
            for tipo in stats_by_type.index:
                stats = stats_by_type.loc[tipo]
                st.write(f"**{tipo}:** {stats['count']} lotes, M√©dia=R${stats['mean']:,.0f}, Mediana=R${stats['median']:,.0f}")
        else:
            st.warning("‚ö†Ô∏è N√£o h√° dados de lotes arrematados para exibir o boxplot.")
    
    with col_right:

        st.subheader("üèôÔ∏è Valores M√©dios por Munic√≠pio")
        

        municipio_stats = df_filtered.groupby('MUNIC√çPIO').agg({
            'AVALIA√á√ÉO': 'mean',
            'Valor da Arremata√ß√£o': 'mean',
            'LOTE': 'count'
        }).round(2).reset_index()
        
        municipio_stats.columns = ['Munic√≠pio', 'Avalia√ß√£o M√©dia', 'Arremata√ß√£o M√©dia', 'Quantidade de Lotes']
        
        municipio_stats = municipio_stats.sort_values('Quantidade de Lotes', ascending=False)
        
        fig_linhas = go.Figure()
        
        fig_linhas.add_trace(go.Scatter(
            x=municipio_stats['Munic√≠pio'],
            y=municipio_stats['Avalia√ß√£o M√©dia'],
            mode='lines+markers',
            name='Avalia√ß√£o M√©dia',
            line=dict(color='blue', width=3),
            marker=dict(size=8)
        ))
        
        municipios_com_arrematacao = municipio_stats[municipio_stats['Arremata√ß√£o M√©dia'].notna()]
        if not municipios_com_arrematacao.empty:
            fig_linhas.add_trace(go.Scatter(
                x=municipios_com_arrematacao['Munic√≠pio'],
                y=municipios_com_arrematacao['Arremata√ß√£o M√©dia'],
                mode='lines+markers',
                name='Arremata√ß√£o M√©dia',
                line=dict(color='green', width=3),
                marker=dict(size=8)
            ))
        
        fig_linhas.update_layout(
            title='Compara√ß√£o entre Valor M√©dio de Avalia√ß√£o e Arremata√ß√£o por Munic√≠pio',
            xaxis_title='Munic√≠pio',
            yaxis_title='Valor (R$)',
            height=500,
            showlegend=True
        )
        
        fig_linhas.update_xaxes(tickangle=45)
        
        st.plotly_chart(fig_linhas, use_container_width=True)
        
        st.markdown("**üìã Resumo por Munic√≠pio:**")
        display_stats = municipio_stats.copy()
        display_stats['Avalia√ß√£o M√©dia'] = display_stats['Avalia√ß√£o M√©dia'].apply(lambda x: f"R$ {x:,.0f}" if pd.notna(x) else "N/A")
        display_stats['Arremata√ß√£o M√©dia'] = display_stats['Arremata√ß√£o M√©dia'].apply(lambda x: f"R$ {x:,.0f}" if pd.notna(x) else "N/A")
        st.dataframe(display_stats, use_container_width=True)
    
    st.subheader("üìà An√°lise de Desempenho Financeiro")
    
    if not df_dispersao.empty:
        col_perf1, col_perf2, col_perf3 = st.columns(3)
        
        with col_perf1:
            maior_desconto_idx = df_dispersao['Diferen√ßa Percentual'].idxmin()
            maior_desconto = df_dispersao.loc[maior_desconto_idx]
            st.metric("Maior Desconto", 
                     f"{(maior_desconto['Diferen√ßa Percentual']):.1f}%",
                     f"{maior_desconto['NOME_POPULAR']} - {maior_desconto['MUNIC√çPIO']}")
        
        with col_perf2:
            menor_desconto_idx = df_dispersao['Diferen√ßa Percentual'].idxmax()
            menor_desconto = df_dispersao.loc[menor_desconto_idx]
            st.metric("Menor Desconto", 
                     f"{(menor_desconto['Diferen√ßa Percentual']):.1f}%",
                     f"{menor_desconto['NOME_POPULAR']} - {menor_desconto['MUNIC√çPIO']}")
        
        with col_perf3:
            maior_valor_idx = df_dispersao['Valor da Arremata√ß√£o'].idxmax()
            maior_valor = df_dispersao.loc[maior_valor_idx]
            st.metric("Maior Arremata√ß√£o", 
                     f"R$ {maior_valor['Valor da Arremata√ß√£o']:,.0f}",
                     f"{maior_valor['NOME_POPULAR']} - {maior_valor['MUNIC√çPIO']}")
    
    st.subheader("üèÜ Top 10 Maiores Arremata√ß√µes")
    
    df_arrematados = df_filtered[df_filtered['Status Arremata√ß√£o'] == 'Arrematado']
    if not df_arrematados.empty:
        top_arrematacoes = df_arrematados.nlargest(10, 'Valor da Arremata√ß√£o')[
            ['MARCA', 'NOME_POPULAR', 'TIPO', 'MUNIC√çPIO', 'AVALIA√á√ÉO', 'Valor da Arremata√ß√£o', 'Diferen√ßa Percentual']
        ].copy()
        
        top_arrematacoes['Diferen√ßa Percentual'] = top_arrematacoes['Diferen√ßa Percentual'].round(2)
        top_arrematacoes['AVALIA√á√ÉO'] = top_arrematacoes['AVALIA√á√ÉO'].apply(lambda x: f"R$ {x:,.0f}")
        top_arrematacoes['Valor da Arremata√ß√£o'] = top_arrematacoes['Valor da Arremata√ß√£o'].apply(lambda x: f"R$ {x:,.0f}")
        top_arrematacoes['Diferen√ßa Percentual'] = top_arrematacoes['Diferen√ßa Percentual'].apply(lambda x: f"{x:.1f}%")
        
        st.dataframe(top_arrematacoes, use_container_width=True)
    else:
        st.info("‚ÑπÔ∏è N√£o h√° dados de arremata√ß√µes para exibir o ranking.")

    st.subheader("üì• Download dos Dados Financeiros")
    
    csv = df_filtered.to_csv(index=False, sep=';', decimal=',')
    st.download_button(
        label="Baixar dados filtrados (CSV)",
        data=csv,
        file_name="dados_financeiros_filtrados.csv",
        mime="text/csv"
    )

except FileNotFoundError:
    st.error("‚ùå Arquivo 'tabela.csv' n√£o encontrado. Certifique-se de que o arquivo est√° no diret√≥rio correto.")
    
except Exception as e:
    st.error(f"‚ùå Ocorreu um erro ao processar os dados: {str(e)}")
    st.info("üí° Dica: Verifique se o arquivo CSV est√° formatado corretamente.")

st.sidebar.markdown("---")
st.sidebar.header("‚ÑπÔ∏è Sobre a An√°lise Financeira")
st.sidebar.info(
     "Esta an√°lise examina os aspectos financeiros do leil√£o, "
     "incluindo rela√ß√µes entre avalia√ß√£o e arremata√ß√£o, distribui√ß√£o "
     "de valores por tipo de ve√≠culo e compara√ß√µes entre munic√≠pios."
 )
