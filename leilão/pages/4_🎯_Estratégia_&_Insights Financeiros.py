import pandas as pd
import streamlit as st
import plotly.express as px

@st.cache_data
def load_data():
    """
    Carrega e limpa os dados - CORRIGIDO
    """
    try:
        df = pd.read_csv('leil√£o/dados/tabela.csv')  # Ajuste o caminho se necess√°rio
        
        # CORRE√á√ÉO: Converter valores monet√°rios
        currency_columns = ['AVALIA√á√ÉO', 'Lance Inicial', 'Valor da Arremata√ß√£o']
        
        for col in currency_columns:
            if df[col].dtype == 'object':
                # Remover R$, pontos e converter v√≠rgula para ponto
                df[col] = df[col].str.replace('R$', '', regex=False)
                df[col] = df[col].str.replace('.', '', regex=False)
                df[col] = df[col].str.replace(',', '.', regex=False)
                df[col] = df[col].str.strip()
            
            # Converter para num√©rico
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        return df
    
    except FileNotFoundError:
        st.error("‚ùå Arquivo 'tabela.csv' n√£o encontrado.")
        st.info("üí° Certifique-se de que o arquivo est√° na mesma pasta do script.")
        return None

def calcular_lances_estrategicos(df):
    """
    Calcula lances estrat√©gicos baseados na an√°lise hist√≥rica - CORRIGIDO
    """
    if df is None:
        return {}
    
    # Filtrar apenas ve√≠culos arrematados
    df_arrematados = df[df['Valor da Arremata√ß√£o'].notna()]
    
    # CORRE√á√ÉO: Verificar se h√° dados
    if len(df_arrematados) == 0:
        st.warning("‚ö†Ô∏è Nenhum ve√≠culo foi arrematado nos dados.")
        return {}
    
    estrategia = {}
    
    for categoria in ['Total', 'Carro', 'Moto', 'Caminh√£o']:
        if categoria == 'Total':
            dados = df_arrematados
        else:
            dados = df_arrematados[df_arrematados['TIPO'] == categoria]
        
        if len(dados) > 0:
            try:
                # CORRE√á√ÉO: Verificar se h√° valores v√°lidos
                valores_validos = dados['Valor da Arremata√ß√£o'].dropna()
                if len(valores_validos) == 0:
                    continue
                
                # Estat√≠sticas b√°sicas
                media_arremate = valores_validos.mean()
                mediana_arremate = valores_validos.median()
                percentil_75 = valores_validos.quantile(0.75)
                percentil_90 = valores_validos.quantile(0.90)
                
                # Estrat√©gia: percentil 75 como "lance competitivo seguro"
                lance_recomendado = percentil_75
                lance_maximo = percentil_90
                
                # Taxa de sucesso hist√≥rica para esse valor
                taxa_sucesso = (len(valores_validos[valores_validos <= lance_recomendado]) / len(valores_validos)) * 100
                
                estrategia[categoria] = {
                    'media_arremate': media_arremate,
                    'mediana_arremate': mediana_arremate,
                    'lance_competitivo': lance_recomendado,
                    'lance_maximo': lance_maximo,
                    'taxa_sucesso_estimada': taxa_sucesso,
                    'amostra': len(dados)
                }
                
            except Exception as e:
                st.warning(f"Erro ao processar categoria {categoria}: {e}")
                continue
    
    return estrategia

def analise_viabilidade_caminhoes(df):
    """
    Analisa a viabilidade de entrar no ramo de aluguel de caminh√µes - CORRIGIDO
    """
    if df is None:
        return None
    
    caminhoes = df[df['TIPO'] == 'Caminh√£o']
    caminhoes_arrematados = caminhoes[caminhoes['Valor da Arremata√ß√£o'].notna()]
    
    if len(caminhoes_arrematados) == 0:
        st.warning("‚ö†Ô∏è Nenhum caminh√£o foi arrematado nos dados.")
        return None
    
    try:
        # CORRE√á√ÉO: Usar apenas valores v√°lidos
        valores_arremate_validos = caminhoes_arrematados['Valor da Arremata√ß√£o'].dropna()
        valores_avaliacao_validos = caminhoes_arrematados['AVALIA√á√ÉO'].dropna()
        
        if len(valores_arremate_validos) == 0 or len(valores_avaliacao_validos) == 0:
            return None
        
        # An√°lise de custos
        investimento_medio = valores_arremate_validos.mean()
        avaliacao_media = valores_avaliacao_validos.mean()
        desconto_medio = ((avaliacao_media - investimento_medio) / avaliacao_media) * 100
        
        # Estimativa de receita (valores de mercado para aluguel de caminh√µes)
        diaria_estimada = 800  # R$ por dia para caminh√£o m√©dio
        utilizacao_mensal = 20  # dias por m√™s
        receita_mensal_estimada = diaria_estimada * utilizacao_mensal
        
        # Payback simples
        payback_meses = investimento_medio / receita_mensal_estimada
        
        # ROI anual estimado
        receita_anual = receita_mensal_estimada * 12
        custos_manutencao = receita_anual * 0.3  # 30% para custos operacionais
        lucro_anual_estimado = receita_anual - custos_manutencao
        # CORRE√á√ÉO: Evitar divis√£o por zero
        if investimento_medio > 0:
            roi_anual = (lucro_anual_estimado / investimento_medio) * 100
        else:
            roi_anual = 0
        
        return {
            'investimento_medio': investimento_medio,
            'avaliacao_media': avaliacao_media,
            'desconto_medio': desconto_medio,
            'diaria_estimada': diaria_estimada,
            'receita_mensal_estimada': receita_mensal_estimada,
            'payback_meses': payback_meses,
            'roi_anual': roi_anual,
            'amostra': len(caminhoes_arrematados),
            'modelos_unicos': caminhoes_arrematados['NOME_POPULAR'].nunique()
        }
    
    except Exception as e:
        st.error(f"Erro na an√°lise de viabilidade: {e}")
        return None

def show_estrategia():
    st.title("üéØ Estrat√©gia de Lances & Viabilidade")
    st.markdown("---")
    
    # Carregar dados
    df = load_data()
    
    if df is None:
        st.stop()  # Para a execu√ß√£o se n√£o carregou dados
    
    # Mostrar informa√ß√µes b√°sicas dos dados
    st.sidebar.info(f"üìä **Dados Carregados:** {len(df)} ve√≠culos")
    
    # Calculando estrat√©gias
    estrategia = calcular_lances_estrategicos(df)
    viabilidade_caminhoes = analise_viabilidade_caminhoes(df)
    
    # CORRE√á√ÉO: Verificar se a estrat√©gia tem dados
    if not estrategia:
        st.error("‚ùå N√£o foi poss√≠vel calcular estrat√©gias. Verifique os dados.")
        return
    
    # SE√á√ÉO 1: RECOMENDA√á√ïES DE LANCES (mantida vis√≠vel como resumo)
    st.header("üí∞ Estrat√©gia de Lances por Categoria")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.subheader("üöó Carros")
        if 'Carro' in estrategia:
            st.metric("Lance Competitivo", f"R$ {estrategia['Carro']['lance_competitivo']:,.0f}")
            st.metric("Taxa de Sucesso", f"{estrategia['Carro']['taxa_sucesso_estimada']:.1f}%")
        else:
            st.warning("Sem dados")
    
    with col2:
        st.subheader("üèçÔ∏è Motos")
        if 'Moto' in estrategia:
            st.metric("Lance Competitivo", f"R$ {estrategia['Moto']['lance_competitivo']:,.0f}")
            st.metric("Taxa de Sucesso", f"{estrategia['Moto']['taxa_sucesso_estimada']:.1f}%")
        else:
            st.warning("Sem dados")
    
    with col3:
        st.subheader("üöõ Caminh√µes")
        if 'Caminh√£o' in estrategia:
            st.metric("Lance Competitivo", f"R$ {estrategia['Caminh√£o']['lance_competitivo']:,.0f}")
            st.metric("Taxa de Sucesso", f"{estrategia['Caminh√£o']['taxa_sucesso_estimada']:.1f}%")
        else:
            st.warning("Sem dados")
    
    with col4:
        st.subheader("üìä Base Estat√≠stica")
        if 'Total' in estrategia:
            st.metric("Amostra Total", estrategia['Total']['amostra'])
            confianca = "Alta" if estrategia['Total']['amostra'] > 100 else "M√©dia"
            st.metric("Confian√ßa", confianca)
        else:
            st.warning("Sem dados")
    
    with st.expander("üìà Detalhes da An√°lise de Lances", expanded=False):
        st.subheader("Metodologia de C√°lculo")
        st.markdown("""
        - **Lance Competitivo**: Percentil 75 dos valores de arremata√ß√£o hist√≥ricos
        - **Taxa de Sucesso**: Percentual de arremata√ß√µes abaixo do lance recomendado
        - **Base Estat√≠stica**: Quantidade de ve√≠culos arrematados na categoria
        """)
        
        if 'Total' in estrategia:
            st.subheader("Estat√≠sticas Completas")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Carros**")
                if 'Carro' in estrategia:
                    st.write(f"- M√©dia: R$ {estrategia['Carro']['media_arremate']:,.0f}")
                    st.write(f"- Mediana: R$ {estrategia['Carro']['mediana_arremate']:,.0f}")
                    st.write(f"- Amostra: {estrategia['Carro']['amostra']} ve√≠culos")
            
            with col2:
                st.write("**Caminh√µes**")
                if 'Caminh√£o' in estrategia:
                    st.write(f"- M√©dia: R$ {estrategia['Caminh√£o']['media_arremate']:,.0f}")
                    st.write(f"- Mediana: R$ {estrategia['Caminh√£o']['mediana_arremate']:,.0f}")
                    st.write(f"- Amostra: {estrategia['Caminh√£o']['amostra']} ve√≠culos")
    
    with st.expander("üöõ Oportunidade: Aluguel de Caminh√µes", expanded=False):
        if viabilidade_caminhoes:
            st.success("**‚úÖ VI√ÅVEL - An√°lise Positiva**")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Investimento M√©dio", f"R$ {viabilidade_caminhoes['investimento_medio']:,.0f}")
                st.metric("Desconto M√©dio", f"{viabilidade_caminhoes['desconto_medio']:.1f}%")
            
            with col2:
                st.metric("Receita Mensal", f"R$ {viabilidade_caminhoes['receita_mensal_estimada']:,.0f}")
                st.metric("Payback", f"{viabilidade_caminhoes['payback_meses']:.1f} meses")
            
            with col3:
                st.metric("ROI Anual", f"{viabilidade_caminhoes['roi_anual']:.1f}%")
                st.metric("Diversidade", f"{viabilidade_caminhoes['modelos_unicos']} modelos")
                
            st.info("""
            **üéØ Por que caminh√µes s√£o uma boa oportunidade:**
            - **Alta demanda** log√≠stica em MT (agroneg√≥cio)
            - **Payback r√°pido** (< 2 anos)
            - **ROI atrativo** (>50% ao ano)
            - **Baixa concorr√™ncia** em aluguel especializado
            - **Descontos significativos** nos leil√µes
            """)
        else:
            st.warning("‚ö†Ô∏è Dados insuficientes para an√°lise de caminh√µes")
    
    # SE√á√ÉO 4: PLANO DE A√á√ÉO (em expander)
    with st.expander("üìã Plano de A√ß√£o Recomendado", expanded=False):
        # CORRE√á√ÉO: Preencher com valores reais
        lance_caminhao = estrategia.get('Caminh√£o', {}).get('lance_competitivo', 'N/A')
        lance_carro = estrategia.get('Carro', {}).get('lance_competitivo', 'N/A')
        lance_moto = estrategia.get('Moto', {}).get('lance_competitivo', 'N/A')
        
        # Formatar valores
        if lance_caminhao != 'N/A':
            lance_caminhao = f"R$ {lance_caminhao:,.0f}"
        if lance_carro != 'N/A':
            lance_carro = f"R$ {lance_carro:,.0f}"
        if lance_moto != 'N/A':
            lance_moto = f"R$ {lance_moto:,.0f}"
        
        st.markdown(f"""
        **üéØ Estrat√©gia de Lances:**
        1. **Caminh√µes**: Lance m√°ximo de {lance_caminhao} (percentil 75)
        2. **Carros populares**: Focar em modelos at√© {lance_carro}
        3. **Motos**: Manter lances abaixo de {lance_moto} para melhor ROI
        
        **üöÄ Expans√£o de Frota:**
        - **Prioridade 1**: Adquirir 3-5 caminh√µes para teste
        - **Prioridade 2**: Renovar frota de motos com CG 150
        - **Prioridade 3**: Substituir carros antigos por modelos econ√¥micos
        """)
        
        st.success("**Conclus√£o Final:** Foco em caminh√µes para aluguel apresenta melhor rela√ß√£o risco-retorno")

# CORRE√á√ÉO: Chamar a fun√ß√£o para executar
if __name__ == "__main__":
    show_estrategia()